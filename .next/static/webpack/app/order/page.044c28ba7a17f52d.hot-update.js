"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/order/page",{

/***/ "(app-pages-browser)/./lib/api/orders.ts":
/*!***************************!*\
  !*** ./lib/api/orders.ts ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOrder: function() { return /* binding */ createOrder; },\n/* harmony export */   getUserOrders: function() { return /* binding */ getUserOrders; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n\nfunction generateOrderNumber() {\n    const timestamp = Date.now().toString().slice(-6);\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, \"0\");\n    return \"ORD-\".concat(timestamp).concat(random);\n}\nasync function getUserOrders(userId) {\n    const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"orders\").select(\"\\n      *,\\n      order_images (\\n        id,\\n        image_url\\n      )\\n    \").eq(\"user_id\", userId).order(\"created_at\", {\n        ascending: false\n    });\n    if (error) {\n        console.error(\"Error fetching orders:\", error);\n        throw new Error(\"Failed to fetch orders\");\n    }\n    return data || [];\n}\nasync function createOrder(orderDetails, contactDetails, userId) {\n    try {\n        var _orderDetails_referenceImages;\n        const orderNumber = generateOrderNumber();\n        // Create order record\n        const { data: order, error: orderError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"orders\").insert({\n            order_number: orderNumber,\n            user_id: userId,\n            type: orderDetails.type,\n            servings: orderDetails.servings,\n            occasion: orderDetails.occasion,\n            delivery_date: orderDetails.deliveryDate.toISOString(),\n            description: orderDetails.description,\n            allergy_info: orderDetails.allergyInfo,\n            status: \"pending\",\n            contact_email: contactDetails.email,\n            contact_name: contactDetails.name,\n            contact_phone: contactDetails.phone,\n            delivery_address: contactDetails.address\n        }).select().single();\n        if (orderError) {\n            console.error(\"Order creation error:\", orderError);\n            throw new Error(\"Failed to create order\");\n        }\n        // Handle image uploads if present\n        if ((_orderDetails_referenceImages = orderDetails.referenceImages) === null || _orderDetails_referenceImages === void 0 ? void 0 : _orderDetails_referenceImages.length) {\n            await uploadOrderImages(order.id, orderDetails.referenceImages);\n        }\n        return order;\n    } catch (error) {\n        console.error(\"Order creation failed:\", error);\n        throw error;\n    }\n}\nasync function uploadOrderImages(orderId, files) {\n    const imagePromises = files.map(async (file)=>{\n        const fileName = \"\".concat(orderId, \"/\").concat(file.name);\n        const { error: uploadError } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"order-images\").upload(fileName, file);\n        if (uploadError) {\n            console.error(\"Image upload error:\", uploadError);\n            return null;\n        }\n        const { data: { publicUrl } } = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.storage.from(\"order-images\").getPublicUrl(fileName);\n        return _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"order_images\").insert({\n            order_id: orderId,\n            image_url: publicUrl\n        });\n    });\n    await Promise.allSettled(imagePromises);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPMUQsbURBQVFBLENBQ1plLElBQUksQ0FBQyxnQkFDTFksTUFBTSxDQUFDO1lBQ05xQyxVQUFVWDtZQUNWWSxXQUFXSDtRQUNiO0lBQ0o7SUFFQSxNQUFNSSxRQUFRQyxVQUFVLENBQUNaO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9hcGkvb3JkZXJzLnRzPzE1NjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3VwYWJhc2UgfSBmcm9tICdAL2xpYi9zdXBhYmFzZSc7XG5pbXBvcnQgeyBPcmRlciwgT3JkZXJEZXRhaWxzLCBDb250YWN0RGV0YWlscyB9IGZyb20gJ0AvdHlwZXMvb3JkZXInO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZU9yZGVyTnVtYmVyKCkge1xuICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlLm5vdygpLnRvU3RyaW5nKCkuc2xpY2UoLTYpO1xuICBjb25zdCByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwKS50b1N0cmluZygpLnBhZFN0YXJ0KDMsICcwJyk7XG4gIHJldHVybiBgT1JELSR7dGltZXN0YW1wfSR7cmFuZG9tfWA7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyT3JkZXJzKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxPcmRlcltdPiB7XG4gIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ29yZGVycycpXG4gICAgLnNlbGVjdChgXG4gICAgICAqLFxuICAgICAgb3JkZXJfaW1hZ2VzIChcbiAgICAgICAgaWQsXG4gICAgICAgIGltYWdlX3VybFxuICAgICAgKVxuICAgIGApXG4gICAgLmVxKCd1c2VyX2lkJywgdXNlcklkKVxuICAgIC5vcmRlcignY3JlYXRlZF9hdCcsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KTtcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBvcmRlcnM6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIG9yZGVycycpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGEgfHwgW107XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVPcmRlcihcbiAgb3JkZXJEZXRhaWxzOiBPcmRlckRldGFpbHMsXG4gIGNvbnRhY3REZXRhaWxzOiBDb250YWN0RGV0YWlscyxcbiAgdXNlcklkOiBzdHJpbmdcbikge1xuICB0cnkge1xuICAgIGNvbnN0IG9yZGVyTnVtYmVyID0gZ2VuZXJhdGVPcmRlck51bWJlcigpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBvcmRlciByZWNvcmRcbiAgICBjb25zdCB7IGRhdGE6IG9yZGVyLCBlcnJvcjogb3JkZXJFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdvcmRlcnMnKVxuICAgICAgLmluc2VydCh7XG4gICAgICAgIG9yZGVyX251bWJlcjogb3JkZXJOdW1iZXIsXG4gICAgICAgIHVzZXJfaWQ6IHVzZXJJZCxcbiAgICAgICAgdHlwZTogb3JkZXJEZXRhaWxzLnR5cGUsXG4gICAgICAgIHNlcnZpbmdzOiBvcmRlckRldGFpbHMuc2VydmluZ3MsXG4gICAgICAgIG9jY2FzaW9uOiBvcmRlckRldGFpbHMub2NjYXNpb24sXG4gICAgICAgIGRlbGl2ZXJ5X2RhdGU6IG9yZGVyRGV0YWlscy5kZWxpdmVyeURhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZGVzY3JpcHRpb246IG9yZGVyRGV0YWlscy5kZXNjcmlwdGlvbixcbiAgICAgICAgYWxsZXJneV9pbmZvOiBvcmRlckRldGFpbHMuYWxsZXJneUluZm8sXG4gICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICBjb250YWN0X2VtYWlsOiBjb250YWN0RGV0YWlscy5lbWFpbCxcbiAgICAgICAgY29udGFjdF9uYW1lOiBjb250YWN0RGV0YWlscy5uYW1lLFxuICAgICAgICBjb250YWN0X3Bob25lOiBjb250YWN0RGV0YWlscy5waG9uZSxcbiAgICAgICAgZGVsaXZlcnlfYWRkcmVzczogY29udGFjdERldGFpbHMuYWRkcmVzc1xuICAgICAgfSlcbiAgICAgIC5zZWxlY3QoKVxuICAgICAgLnNpbmdsZSgpO1xuXG4gICAgaWYgKG9yZGVyRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ09yZGVyIGNyZWF0aW9uIGVycm9yOicsIG9yZGVyRXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIG9yZGVyJyk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGltYWdlIHVwbG9hZHMgaWYgcHJlc2VudFxuICAgIGlmIChvcmRlckRldGFpbHMucmVmZXJlbmNlSW1hZ2VzPy5sZW5ndGgpIHtcbiAgICAgIGF3YWl0IHVwbG9hZE9yZGVySW1hZ2VzKG9yZGVyLmlkLCBvcmRlckRldGFpbHMucmVmZXJlbmNlSW1hZ2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3JkZXI7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignT3JkZXIgY3JlYXRpb24gZmFpbGVkOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRPcmRlckltYWdlcyhvcmRlcklkOiBzdHJpbmcsIGZpbGVzOiBGaWxlW10pIHtcbiAgY29uc3QgaW1hZ2VQcm9taXNlcyA9IGZpbGVzLm1hcChhc3luYyAoZmlsZSkgPT4ge1xuICAgIGNvbnN0IGZpbGVOYW1lID0gYCR7b3JkZXJJZH0vJHtmaWxlLm5hbWV9YDtcbiAgICBjb25zdCB7IGVycm9yOiB1cGxvYWRFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2Uuc3RvcmFnZVxuICAgICAgLmZyb20oJ29yZGVyLWltYWdlcycpXG4gICAgICAudXBsb2FkKGZpbGVOYW1lLCBmaWxlKTtcblxuICAgIGlmICh1cGxvYWRFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignSW1hZ2UgdXBsb2FkIGVycm9yOicsIHVwbG9hZEVycm9yKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZGF0YTogeyBwdWJsaWNVcmwgfSB9ID0gc3VwYWJhc2Uuc3RvcmFnZVxuICAgICAgLmZyb20oJ29yZGVyLWltYWdlcycpXG4gICAgICAuZ2V0UHVibGljVXJsKGZpbGVOYW1lKTtcblxuICAgIHJldHVybiBzdXBhYmFzZVxuICAgICAgLmZyb20oJ29yZGVyX2ltYWdlcycpXG4gICAgICAuaW5zZXJ0KHtcbiAgICAgICAgb3JkZXJfaWQ6IG9yZGVySWQsXG4gICAgICAgIGltYWdlX3VybDogcHVibGljVXJsLFxuICAgICAgfSk7XG4gIH0pO1xuXG4gIGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChpbWFnZVByb21pc2VzKTtcbn0iXSwibmFtZXMiOlsic3VwYWJhc2UiLCJnZW5lcmF0ZU9yZGVyTnVtYmVyIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInRvU3RyaW5nIiwic2xpY2UiLCJyYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJwYWRTdGFydCIsImdldFVzZXJPcmRlcnMiLCJ1c2VySWQiLCJkYXRhIiwiZXJyb3IiLCJmcm9tIiwic2VsZWN0IiwiZXEiLCJvcmRlciIsImFzY2VuZGluZyIsImNvbnNvbGUiLCJFcnJvciIsImNyZWF0ZU9yZGVyIiwib3JkZXJEZXRhaWxzIiwiY29udGFjdERldGFpbHMiLCJvcmRlck51bWJlciIsIm9yZGVyRXJyb3IiLCJpbnNlcnQiLCJvcmRlcl9udW1iZXIiLCJ1c2VyX2lkIiwidHlwZSIsInNlcnZpbmdzIiwib2NjYXNpb24iLCJkZWxpdmVyeV9kYXRlIiwiZGVsaXZlcnlEYXRlIiwidG9JU09TdHJpbmciLCJkZXNjcmlwdGlvbiIsImFsbGVyZ3lfaW5mbyIsImFsbGVyZ3lJbmZvIiwic3RhdHVzIiwiY29udGFjdF9lbWFpbCIsImVtYWlsIiwiY29udGFjdF9uYW1lIiwibmFtZSIsImNvbnRhY3RfcGhvbmUiLCJwaG9uZSIsImRlbGl2ZXJ5X2FkZHJlc3MiLCJhZGRyZXNzIiwic2luZ2xlIiwicmVmZXJlbmNlSW1hZ2VzIiwibGVuZ3RoIiwidXBsb2FkT3JkZXJJbWFnZXMiLCJpZCIsIm9yZGVySWQiLCJmaWxlcyIsImltYWdlUHJvbWlzZXMiLCJtYXAiLCJmaWxlIiwiZmlsZU5hbWUiLCJ1cGxvYWRFcnJvciIsInN0b3JhZ2UiLCJ1cGxvYWQiLCJwdWJsaWNVcmwiLCJnZXRQdWJsaWNVcmwiLCJvcmRlcl9pZCIsImltYWdlX3VybCIsIlByb21pc2UiLCJhbGxTZXR0bGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/orders.ts\n"));

/***/ })

});